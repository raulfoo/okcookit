workDat[date]
gregexpr(">[\\w\\d\\s]*</a>",workDat[country])
workDat[country]
gregexpr(">Netherlands</a>",workDat[country])
gregexpr(">[\\w\\d\\s]*</a>",workDat[country])
gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)
gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]]
gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]
?substr
gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][2]
gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][3]
gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[2]]
gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[1]
gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[1][1]
attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T))
attr(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T))
attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])
attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1]
attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][1]
attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]
countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]-1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-5#
	substr(workDat[country],countryStart,countryStop)
countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-5#
	substr(workDat[country],countryStart,countryStop)
countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	substr(workDat[country],countryStart,countryStop)
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	dateStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
#
	output[i,] = c(countryName,dateName,typeName)#
}
output
setwd('users/raulfoo/Desktop/')#
dat = readLines('http://www.electionguide.org/calendar.php')#
#
starts = grep('<tr class="color',dat)#
#
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	dateStart = gregexpr(">[\\w\\d\\s]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
#
	output[i,] = c(countryName,dateName,typeName)#
}
output
setwd('users/raulfoo/Desktop/')#
dat = readLines('http://www.electionguide.org/calendar.php')#
#
starts = grep('<tr class="color',dat)#
#
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	typeStart = gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	dateStart = gregexpr(">[\\w\\d\\s]*</q>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</q>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
#
	output[i,] = c(countryName,dateName,typeName)#
}
output
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	dateStart = gregexpr(">[\\w\\d\\s[:punct:]]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
#
	output[i,] = c(countryName,dateName,typeName)#
}
output
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	dateStart = gregexpr(">[\\w\\d\\s,]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
#
	output[i,] = c(countryName,dateName,typeName)#
}
output
i = 1
if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]
workDat
country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	date = grep('<td class="last">',workDat)
workDat[date]
dateStart = gregexpr(">[\\w\\d\\s,]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)
dateName
dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)
dateName
dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = countryStart + attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)
dateName
dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = countryStart + attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)
dateName
dateStart
dateStop
attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = dateStart + attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
#
	output[i,] = c(countryName,dateName,typeName)#
}
output
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = dateStart + attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
	dateName = gsub("[<>]","",dateName)#
	output[i,] = c(countryName,dateName,typeName)#
}
output
i = 5
if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	date = grep('<td class="last">',workDat)
type
utput = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	if(type==NA) type = grep('<td>',workDat)[3]#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = dateStart + attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
	dateName = gsub("[<>]","",dateName)#
	output[i,] = c(countryName,dateName,typeName)#
}
country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	if(type==NA) type = grep('<td>',workDat)[3]#
	date = grep('<td class="last">',workDat)
(type==NA
)
if(type=='NA') type = grep('<td>',workDat)[3]
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	typeCheck = 0#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	if(type=='NA') {#
		type = grep('<td>',workDat)[3]#
typeCheck = 1#
	}	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	if(typeCheck == 0){#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	}#
	if(typeCheck ==1){#
		typeStart = gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
		}#
	}#
	dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = dateStart + attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
	dateName = gsub("[<>]","",dateName)#
	output[i,] = c(countryName,dateName,typeName)#
}
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	typeCheck = 0#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	if(type=='NA') {#
		type = grep('<td>',workDat)[3]#
typeCheck = 1#
	}	#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	if(typeCheck == 0){#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	}#
	if(typeCheck ==1){#
		typeStart = gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
		}#
	dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = dateStart + attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
	dateName = gsub("[<>]","",dateName)#
	output[i,] = c(countryName,dateName,typeName)#
}
i
type=='NA'
type
is.na(type)
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	typeCheck = 0#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	if(is.na(type)==T) {#
		type = grep('<td>',workDat)[3]#
typeCheck = 1#
	}	#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	if(typeCheck == 0){#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	}#
	if(typeCheck ==1){#
		typeStart = gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
		}#
	dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = dateStart + attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
	dateName = gsub("[<>]","",dateName)#
	output[i,] = c(countryName,dateName,typeName)#
}
output
i = 5
typeCheck = 0#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	if(is.na(type)==T) {#
		type = grep('<td>',workDat)[3]#
typeCheck = 1#
	}	#
	date = grep('<td class="last">',workDat)
type
grep('<td>',workDat)
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	typeCheck = 0#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	if(is.na(type)==T) {#
		type = grep('<td>',workDat)[2]#
typeCheck = 1#
	}	#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	if(typeCheck == 0){#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	}#
	if(typeCheck ==1){#
		typeStart = gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
		}#
	dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = dateStart + attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
	dateName = gsub("[<>]","",dateName)#
	output[i,] = c(countryName,dateName,typeName)#
}
output
output = array(dim=c(length(starts),3))#
for(i in 1:length(starts)){#
	typeCheck = 0#
	if(i == length(starts)) workDat = dat[starts[i]:(starts[i]+7)]#
    if(i<length(starts)) workDat = dat[starts[i]:starts[(i+1)]-1]#
#
	country = grep('<td><a href',workDat)[1]#
	type = grep('<td><a href',workDat)[2]#
	if(is.na(type)==T) {#
		type = grep('<td>',workDat)[2]#
typeCheck = 1#
	}	#
	date = grep('<td class="last">',workDat)#
	countryStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]][1]+1#
	countryStop = countryStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[country],perl=T)[[1]])[1][[1]]-6#
	countryName = substr(workDat[country],countryStart,countryStop)	#
	if(typeCheck == 0){#
	typeStart = gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</a>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
	}#
	if(typeCheck ==1){#
		typeStart = gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]][1]+1#
	typeStop = typeStart + attributes(gregexpr(">[\\w\\d\\s]*</td>",workDat[type],perl=T)[[1]])[1][[1]]-6#
	typeName = substr(workDat[type],typeStart,typeStop)	#
		typeName = gsub("[<>]","",typeName)#
		}#
	dateStart = gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]][1]+1#
	dateStop = dateStart + attributes(gregexpr(">[\\w\\d\\s\\D\\W\\S]*</td>",workDat[date],perl=T)[[1]])[1][[1]]-6#
	dateName = substr(workDat[date],dateStart,dateStop)	#
	dateName = gsub("[<>]","",dateName)#
	output[i,] = c(countryName,dateName,typeName)#
}
output
write.csv(output,'FutureElections.csv',row.names=F)
dat = read.table("/Users/raulfoo/Desktop/tempUpload.txt",stringsAsFactors=F,sep=",")
dat
output = c()#
output = rbind(output,c("F-35",12345,'t'))#
output = rbind(output,c("Defense",13212345,'t'))#
output = rbind(output,c("EPA",14,'t'))#
#
write.table(output,"temp.txt",row.names=F,col.names=F,sep=",")
output = c()#
output = rbind(output,c("F-35",12345,'t'))#
output = rbind(output,c("Defense",13212345,'t'))#
output = rbind(output,c("EPA",14,'t'))#
#
write.table(output,"/Users/raulfoo/Desktop/temp.txt",row.names=F,col.names=F,sep=",")
?mfrow
?par
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability.txt",stringsAsFactors=F)#
#
conversion = read.csv("crappy_food_list.csv",stringsAsFactors=F)#
#
newConv = c()
conversion
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability.txt",stringsAsFactors=F)#
#
conversion = read.csv("crappy_food_list.csv",stringsAsFactors=F)#
#
newConv = c()
conversion
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability.txt",stringsAsFactors=F)#
#
conversion = read.csv("crappy_food_list.csv",stringsAsFactors=F)#
#
newConv = c()#
for(i in conversion[,1]){#
	 #convert blueberry to bluberr (to get blueberry and blueberries)#
		i = gsub("\\(([^\\)]+)\\)","",i) # remove parenthesis#
	i = strsplit(i,",")[[1]][1]#
	i = strsplit(i,"/")[[1]][1]#
	i = gsub("  "," ",i)#
	i = gsub("seed$","",i)#
	i = tolower(i)#
#
	referenceWord = i#
#
	i = strsplit(i," or ")[[1]][1]#
	if(substr(i,nchar(i),nchar(i))==" "){#
		while(substr(i,nchar(i),nchar(i))==" "){#
			i = substr(i,0,nchar(i)-1)#
			}#
		}#
	referenceWord = i#
#
	i = gsub("s$|s ","",i)#
	i = gsub("rry$","rr",i)#
	searchWord = i#
	numWords = 1#
	if(attributes(gregexpr(" ",i)[[1]])[[1]][1]!=-1){#
		numWords = length(attributes(gregexpr(" ",i)[[1]])[[1]])+1#
		}#
	newConv = rbind(newConv,c(searchWord,referenceWord,numWords,nchar(i)))#
}#
#
newConv = newConv[order(as.numeric(newConv[,3]),as.numeric(newConv[,4]),decreasing=T),]
newConv
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability.txt",stringsAsFactors=F)#
#
conversion = read.csv("crappy_food_list.csv",stringsAsFactors=F)#
#
newConv = c()#
for(i in conversion[,1]){#
	 #convert blueberry to bluberr (to get blueberry and blueberries)#
		i = gsub("\\(([^\\)]+)\\)","",i) # remove parenthesis#
	i = strsplit(i,",")[[1]][1]#
	i = strsplit(i,"/")[[1]][1]#
	i = gsub("  "," ",i)#
	i = gsub("seed$","",i)#
	i = tolower(i)#
#
	referenceWord = i#
#
	i = strsplit(i," or ")[[1]][1]#
	if(substr(i,nchar(i),nchar(i))==" "){#
		while(substr(i,nchar(i),nchar(i))==" "){#
			i = substr(i,0,nchar(i)-1)#
			}#
		}#
	referenceWord = i#
#
	i = gsub("s$|s ","",i)#
	i = gsub("rry$","rr",i)#
	searchWord = i#
	numWords = 1#
	if(attributes(gregexpr(" ",i)[[1]])[[1]][1]!=-1){#
		numWords = length(attributes(gregexpr(" ",i)[[1]])[[1]])+1#
		}#
	newConv = rbind(newConv,c(searchWord,referenceWord,numWords,nchar(i)))#
}#
#
newConv = newConv[order(as.numeric(newConv[,3]),as.numeric(newConv[,4]),decreasing=T),]
newConv
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability.txt",stringsAsFactors=F)#
#
conversion = read.csv("crappy_food_list.csv",stringsAsFactors=F)#
#
newConv = c()#
for(i in conversion[,1]){#
	 #convert blueberry to bluberr (to get blueberry and blueberries)#
		i = gsub("\\(([^\\)]+)\\)","",i) # remove parenthesis#
	i = strsplit(i,",")[[1]][1]#
	i = strsplit(i,"/")[[1]][1]#
	i = gsub("  "," ",i)#
	i = gsub("seed$","",i)#
	i = tolower(i)#
#
	referenceWord = i#
#
	i = strsplit(i," or ")[[1]][1]#
	if(substr(i,nchar(i),nchar(i))==" "){#
		while(substr(i,nchar(i),nchar(i))==" "){#
			i = substr(i,0,nchar(i)-1)#
			}#
		}#
	referenceWord = i#
#
	i = gsub("s$|s ","",i)#
	i = gsub("rry$","rr",i)#
	searchWord = i#
	numWords = 1#
	if(attributes(gregexpr(" ",i)[[1]])[[1]][1]!=-1){#
		numWords = length(attributes(gregexpr(" ",i)[[1]])[[1]])+1#
		}#
	newConv = rbind(newConv,c(searchWord,referenceWord,numWords,nchar(i)))#
}#
#
newConv = newConv[order(as.numeric(newConv[,3]),as.numeric(newConv[,4]),decreasing=T),]#
#
#order it by which ingredient have most words
newConv[]
newConv[grep("chili powder",newConv[,2]),2] = "chile powder"
newConv
write.csv(newConv,"less_crappy_list.csv",row.names=F)#
#clean up the list#
#need to make sure only getting complete words here(add spaces to beginnng and end of dat[,1], and keep them in conversions table)#
#
searchWords = newConv[,1]#
referenceWords = newConv[,2]#
workDat = tolower(dat[,1])#
index = 1#
newWorkDat = workDat#
output = array(dim=c(length(newWorkDat),3))#
output[,1] = workDat#
#output[,2] = workDat#
output[,3] = F#
newWorkDat =  gsub("\\(([^\\)]+)\\)","",newWorkDat)	#
for(i in workDat){#
	subIndex = 1#
	i = gsub("[,;:]","",i)#
	for(j in searchWords){#
#if(grepl(paste("(^|[[:space:]])",j,"($|[[:space:]])",sep=""),i)){#
	    if(grepl(j,i)){#
#print(j)#
			output[index,2] = referenceWords[subIndex]#
			output[index,3] = T #
			break#
		}#
		subIndex = subIndex+1#
	}#
	output[index,2] = strsplit(output[index,2],",")[[1]][1]	#
	index = index+1#
	if(index %% 25==0) print(index)#
}
output[1:100,c(1,2)]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
#
usda = read.table("USDA_Foodlist/USDA_Food_List.txt",stringsAsFactors = F)#
usda = usda[,1]#
#
dat = read.csv("Files_For_PostGres/less_crappy_list.csv")#
#
for(i in dat[,1]){#
	matches = grep(paste(toupper(i),sep=""),usda)#
	if(length(matches)>0){#
		print(matches)#
		print(i)#
		usda = usda[-matches]#
	}#
}#
removeBrand = c("KRAFT","MORNINGSTAR","WORTHINGTON","V8","SILK","OSCAR MAYER","SWANSON","GENERAL MILLS","PIZZA HUT","CAMPBELL","'","LITTLE CAESARS","KENTUCKY FRIED","LOMA LINDA","VITASOY","FRANCO-AMERICAN")#
#
for(j in removeBrand){#
	 matches = grep(j,usda)#
	if(length(matches)>0){#
		usda = usda[-matches]#
#
		}#
}#
#
dat = read.csv("Files_For_PostGres/crappy_food_list.csv")#
output = c(dat,usda)#
#
write.csv(output,"crappy_food_list.csv")
usda
output
dat
dat = read.csv("Files_For_PostGres/crappy_food_list.csv")
dat
dat#
dat = read.csv("Files_For_PostGres/crappy_food_list.csv")[,1]
dat
output = c(dat,usda)
output
write.csv(output,"crappy_food_list.csv")
output
write.csv(output,"crappy_food_list.csv")
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
#
usda = read.table("USDA_Foodlist/USDA_Food_List.txt",stringsAsFactors = F)#
usda = usda[,1]#
#
dat = read.csv("Files_For_PostGres/less_crappy_list.csv")#
#
for(i in dat[,1]){#
	matches = grep(paste(toupper(i),sep=""),usda)#
	if(length(matches)>0){#
		print(matches)#
		print(i)#
		usda = usda[-matches]#
	}#
}#
removeBrand = c("KRAFT","MORNINGSTAR","WORTHINGTON","V8","SILK","OSCAR MAYER","SWANSON","GENERAL MILLS","PIZZA HUT","CAMPBELL","'","LITTLE CAESARS","KENTUCKY FRIED","LOMA LINDA","VITASOY","FRANCO-AMERICAN")#
#
for(j in removeBrand){#
	 matches = grep(j,usda)#
	if(length(matches)>0){#
		usda = usda[-matches]#
#
		}#
}#
#
dat = read.csv("Files_For_PostGres/crappy_food_list.csv")[,1]#
output = c(dat,usda)#
#
write.csv(output,"crappy_food_list.csv")
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
#
usda = read.table("USDA_Foodlist/USDA_Food_List.txt",stringsAsFactors = F)#
usda = usda[,1]#
#
dat = read.csv("Files_For_PostGres/less_crappy_list.csv")#
#
for(i in dat[,1]){#
	matches = grep(paste(toupper(i),sep=""),usda)#
	if(length(matches)>0){#
		print(matches)#
		print(i)#
		usda = usda[-matches]#
	}#
}#
removeBrand = c("KRAFT","MORNINGSTAR","WORTHINGTON","V8","SILK","OSCAR MAYER","SWANSON","GENERAL MILLS","PIZZA HUT","CAMPBELL","'","LITTLE CAESARS","KENTUCKY FRIED","LOMA LINDA","VITASOY","FRANCO-AMERICAN")#
#
for(j in removeBrand){#
	 matches = grep(j,usda)#
	if(length(matches)>0){#
		usda = usda[-matches]#
#
		}#
}#
#
dat = read.csv("Files_For_PostGres/crappy_food_list.csv")[,1]#
output = c(dat,usda)#
#
write.csv(output,"Files_For_PostGres/crappy_food_list.csv")
output
dat = read.csv("Files_For_PostGres/crappy_food_list.csv")[,1]
dat
dat = read.csv("Files_For_PostGres/crappy_food_list.csv")[,2]
dat
dat = as.character(read.csv("Files_For_PostGres/crappy_food_list.csv")[,2])
as.character(read.csv("Files_For_PostGres/crappy_food_list.csv")[,1])
dat = as.character(read.csv("Files_For_PostGres/crappy_food_list.csv")[,1])#
output = c(dat,usda)
output
output[1]
write.csv(output,"Files_For_PostGres/crappy_food_list.csv")
write.csv(output,"Files_For_PostGres/crappy_food_list.csv",col.names=F,row.names=F)
setwd("/users/raulfoo/desktop/temp/")#
#
dat = read.csv("fishmeal_stuff.csv",stringsAsFactos=F)#
#
index = which(dat[,3]=="Production")#
#
col1 = which(colnames(dat)=="X1990")#
col2 = which(colnames(dat)=="X2009")#
#
dat[is.na(dat)==T] = 0#
output = c()#
for(i in c(1990:2009)){#
#
colName = paste("X",i,sep="")#
col1 = which(colnames(dat)==colName)#
total1 = sum(as.numeric(as.character(dat[index,col1])),na.rm=T)#
#total2 = sum(dat[index,col2],na.rm=T)#
#
chinaProdInd = which(dat[,3]=="Production" & dat[,1] == "China")[1]#
chinaImportInd = which(dat[,3]=="Import" & dat[,1] == "China")#
#chinaExportInd = which(dat[,3]=="Export" & dat[,1] == "China")#
#
prods = as.numeric(as.character(dat[chinaImportInd,col1]))#
if(length(prods)<1) prods = 0#
imports = as.numeric(as.character(dat[chinaImportInd,col1]))#
if(length(imports)<1) imports = 0#
#
chinaShare = (prods+imports)/total1#
#chinaShare2 = (dat[chinaProdInd,col2]+dat[chinaImportInd,col2])/total2#
output = rbind(output,c(i,chinaShare))#
}
i
setwd("/users/raulfoo/desktop/temp/")#
#
dat = read.csv("fishmeal_stuff.csv",stringsAsFactos=F)#
#
index = which(dat[,3]=="Production")#
#
col1 = which(colnames(dat)=="X1990")#
col2 = which(colnames(dat)=="X2009")#
#
dat[is.na(dat)==T] = 0#
output = c()#
for(i in c(1990:2009)){#
#
colName = paste("X",i,sep="")#
col1 = which(colnames(dat)==colName)#
total1 = sum(as.numeric(as.character(dat[index,col1])),na.rm=T)#
#total2 = sum(dat[index,col2],na.rm=T)#
#
chinaProdInd = which(dat[,3]=="Production" & dat[,1] == "China")[1]#
chinaImportInd = which(dat[,3]=="Import" & dat[,1] == "China")#
#chinaExportInd = which(dat[,3]=="Export" & dat[,1] == "China")#
#
prods = as.numeric(as.character(dat[chinaImportInd,col1]))#
if(length(prods)<1) prods = 0#
imports = as.numeric(as.character(dat[chinaImportInd,col1]))#
if(length(imports)<1) imports = 0#
#
chinaShare = (prods+imports)/total1#
#chinaShare2 = (dat[chinaProdInd,col2]+dat[chinaImportInd,col2])/total2#
output = rbind(output,c(i,chinaShare))#
}
col1
index
colName
col1
colnames(dat)
dat
setwd("/users/raulfoo/desktop/temp/")#
#
dat = read.csv("fishmeal_stuff.csv",stringsAsFactos=F)
setwd("/users/raulfoo/desktop/temp/")#
#
dat = read.csv("fishmeal_stuff.csv")#
#
index = which(dat[,3]=="Production")#
#
col1 = which(colnames(dat)=="X1990")#
col2 = which(colnames(dat)=="X2009")#
#
dat[is.na(dat)==T] = 0#
output = c()#
for(i in c(1990:2009)){#
#
colName = paste("X",i,sep="")#
col1 = which(colnames(dat)==colName)#
total1 = sum(as.numeric(as.character(dat[index,col1])),na.rm=T)#
#total2 = sum(dat[index,col2],na.rm=T)#
#
chinaProdInd = which(dat[,3]=="Production" & dat[,1] == "China")[1]#
chinaImportInd = which(dat[,3]=="Import" & dat[,1] == "China")#
#chinaExportInd = which(dat[,3]=="Export" & dat[,1] == "China")#
#
prods = as.numeric(as.character(dat[chinaImportInd,col1]))#
if(length(prods)<1) prods = 0#
imports = as.numeric(as.character(dat[chinaImportInd,col1]))#
if(length(imports)<1) imports = 0#
#
chinaShare = (prods+imports)/total1#
#chinaShare2 = (dat[chinaProdInd,col2]+dat[chinaImportInd,col2])/total2#
output = rbind(output,c(i,chinaShare))#
}
prods
imports
setwd("/users/raulfoo/desktop/temp/")#
#
dat = read.csv("fishmeal_stuff.csv")#
#
index = which(dat[,3]=="Production")#
#
col1 = which(colnames(dat)=="X1990")#
col2 = which(colnames(dat)=="X2009")#
#
dat[is.na(dat)==T] = 0#
output = c()#
for(i in c(1990:2009)){#
#
colName = paste("X",i,sep="")#
col1 = which(colnames(dat)==colName)#
total1 = sum(as.numeric(as.character(dat[index,col1])),na.rm=T)#
#total2 = sum(dat[index,col2],na.rm=T)#
#
chinaProdInd = which(dat[,3]=="Production" & dat[,1] == "China")[1]#
chinaImportInd = which(dat[,3]=="Import" & dat[,1] == "China")#
#chinaExportInd = which(dat[,3]=="Export" & dat[,1] == "China")#
#
prods = as.numeric(as.character(dat[chinaProdInd,col1]))#
if(length(prods)<1) prods = 0#
imports = as.numeric(as.character(dat[chinaImportInd,col1]))#
if(length(imports)<1) imports = 0#
#
chinaShare = (prods+imports)/total1#
#chinaShare2 = (dat[chinaProdInd,col2]+dat[chinaImportInd,col2])/total2#
output = rbind(output,c(i,chinaShare))#
}#
colnames(output) = c("Year","China % of Global Fishmeal")#
write.csv(output,"China Fishmeal 1990-2009.csv")
prods
imports
setwd("/users/raulfoo/desktop/temp/")#
#
dat = read.csv("fishmeal_stuff.csv")#
#
index = which(dat[,3]=="Production")#
#
col1 = which(colnames(dat)=="X1990")#
col2 = which(colnames(dat)=="X2009")#
#
dat[is.na(dat)==T] = 0#
output = c()#
for(i in c(1990:2009)){#
#
colName = paste("X",i,sep="")#
col1 = which(colnames(dat)==colName)#
total1 = sum(as.numeric(as.character(dat[index,col1])),na.rm=T)#
#total2 = sum(dat[index,col2],na.rm=T)#
#
chinaProdInd = which(dat[,3]=="Production" & dat[,1] == "China")[1]#
chinaImportInd = which(dat[,3]=="Import" & dat[,1] == "China")#
#chinaExportInd = which(dat[,3]=="Export" & dat[,1] == "China")#
#
prods = as.numeric(as.character(dat[chinaProdInd,col1]))#
if(length(prods)<1) prods = 0#
imports = as.numeric(as.character(dat[chinaImportInd,col1]))#
if(length(imports)<1) imports = 0#
#
chinaShare = (prods+imports)/total1#
#chinaShare2 = (dat[chinaProdInd,col2]+dat[chinaImportInd,col2])/total2#
output = rbind(output,c(i,chinaShare))#
}#
colnames(output) = c("Year","China % of Global Fishmeal")#
write.csv(output,"China Fishmeal 1990-2009.csv")
output
setwd("/users/raulfoo/desktop/temp/")#
#
dat = read.csv("fishmeal_stuff.csv")#
#
index = which(dat[,3]=="Production")#
#
col1 = which(colnames(dat)=="X1990")#
col2 = which(colnames(dat)=="X2009")#
#
dat[is.na(dat)==T] = 0#
output = c()#
for(i in c(1990:2009)){#
#
colName = paste("X",i,sep="")#
col1 = which(colnames(dat)==colName)#
total1 = sum(as.numeric(as.character(dat[index,col1])),na.rm=T)#
#total2 = sum(dat[index,col2],na.rm=T)#
#
chinaProdInd = which(dat[,3]=="Production" & dat[,1] == "China")[1]#
chinaImportInd = which(dat[,3]=="Import" & dat[,1] == "China")#
#chinaExportInd = which(dat[,3]=="Export" & dat[,1] == "China")#
#
prods = as.numeric(as.character(dat[chinaProdInd,col1]))#
if(length(prods)<1) prods = 0#
imports = as.numeric(as.character(dat[chinaImportInd,col1]))#
if(length(imports)<1) imports = 0#
#
chinaShare = (prods+imports)/total1#
#chinaShare2 = (dat[chinaProdInd,col2]+dat[chinaImportInd,col2])/total2#
output = rbind(output,c(i,prods,imports,chinaShare))#
}#
colnames(output) = c("Year","China % of Global Fishmeal")#
write.csv(output,"China Fishmeal 1990-2009.csv")
setwd("/users/raulfoo/desktop/temp/")#
#
dat = read.csv("fishmeal_stuff.csv")#
#
index = which(dat[,3]=="Production")#
#
col1 = which(colnames(dat)=="X1990")#
col2 = which(colnames(dat)=="X2009")#
#
dat[is.na(dat)==T] = 0#
output = c()#
for(i in c(1990:2009)){#
#
colName = paste("X",i,sep="")#
col1 = which(colnames(dat)==colName)#
total1 = sum(as.numeric(as.character(dat[index,col1])),na.rm=T)#
#total2 = sum(dat[index,col2],na.rm=T)#
#
chinaProdInd = which(dat[,3]=="Production" & dat[,1] == "China")[1]#
chinaImportInd = which(dat[,3]=="Import" & dat[,1] == "China")#
#chinaExportInd = which(dat[,3]=="Export" & dat[,1] == "China")#
#
prods = as.numeric(as.character(dat[chinaProdInd,col1]))#
if(length(prods)<1) prods = 0#
imports = as.numeric(as.character(dat[chinaImportInd,col1]))#
if(length(imports)<1) imports = 0#
#
chinaShare = (prods+imports)/total1#
#chinaShare2 = (dat[chinaProdInd,col2]+dat[chinaImportInd,col2])/total2#
output = rbind(output,c(i,prods,imports,chinaShare))#
}#
colnames(output) = c("Year","Production (tonnes)","Imports (tonnes)","China % of Global Fishmeal")#
write.csv(output,"China Fishmeal 1990-2009.csv")
output
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
#
source("Scripts/create_recipe_table(forPostgres).R")#
#
print(1)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Scripts/Ingredient_Commonality_Table(ForPostgres).R")#
#
print(2)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Scripts/create_full_ingredient_table(ForPostgres).R")#
#
print(3)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/Ingredient_Generalization_ConverterCrappyFoodList.R")#
#
print(4)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/Cleaned_Ingredient_Commonality_Table(ForPostgres).R")#
#
print(5)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/recipe_list_addCommonalityAvg.R")#
#
print(6)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/Bayesian_Pairs.R")#
#
print(7)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/User_Pairings_Base.R")#
print("done")
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
	print(paste(select,recipeIndex))#
	additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
}#
output = cbind(output,additionalColumn)#
#
finished = unique(dat[,1])#
output = output[finished,]
output[1,]
dim(output)
finished
dim(output)
output[1590,]
output[1000,]
output[1200,]
output[1300,]
output[1400,]
output[1500,]
output[1550,]
output[1570,]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
#print(paste(select,recipeIndex))#
	additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
}#
output = cbind(output,additionalColumn)#
#
finished = unique(dat[,1])#
output = output[finished,]
output[1550,]
output[1580,]
output[1590,]
output[1585,]
output[1587,]
output[1588,]
output[1589,]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())
dim(dat)
recipeIndex
output[,1]
output[1606,]
dat[nrow(dat),]
output[nrow(output),]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())
unique(dat[,1])
dat[which(dat[,1]==602)]
dat[which(dat[,1]==602),]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
	if(length(select)>0){#
#print(paste(select,recipeIndex))#
		additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
	}#
}#
output = cbind(output,additionalColumn)#
#
finished = unique(dat[,1])#
output = output[finished,]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
write.table(output,"recipe_list(ForPostGres).txt",row.names=F,sep=",",col.names=F)
output[nrow(output),]
recipeIndex = 1606
elect = which(dat[,1]==recipeIndex)[1]
select = which(dat[,1]==recipeIndex)[1]
select
length(select)>0
length(select)
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
	if(is.na(select)==F){#
#print(paste(select,recipeIndex))#
		additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
	}#
}#
output = cbind(output,additionalColumn)#
#
finished = unique(dat[,1])#
output = output[finished,]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
write.table(output,"recipe_list(ForPostGres).txt",row.names=F,sep=",",col.names=F)
recipeIndex
output[,1]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
	if(is.na(select)==F){#
#print(paste(select,recipeIndex))#
		additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
	}#
}
recipeIndex
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
	if(is.na(select)==F){#
#print(paste(select,recipeIndex))#
		additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
	}else{#
	output = output[-which(output[,1] == recipeIndex),]#
	}#
}#
output = cbind(output,additionalColumn)
finished = unique(dat[,1])#
output = output[finished,]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
write.table(output,"recipe_list(ForPostGres).txt",row.names=F,sep=",",col.names=F)
output[nrow(output),]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
	if(is.na(select)==F){#
#print(paste(select,recipeIndex))#
		additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
	}else{#
#output = output[-which(output[,1] == recipeIndex),]#
	}#
}
dim(output)
dim(additionalColumn)
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())
dim(dat)
dat[1,]
dat[2,]
unique(dat[,1])
unique(dat[,2])
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
finalOut = c()#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
	if(is.na(select)==F){#
#print(paste(select,recipeIndex))#
		additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
		finalOut = rbind(finalOut,output[which(output[,1] == recipeIndex),])#
	}else{#
#output = output[-which(output[,1] == recipeIndex),]#
	}#
}#
output = cbind(output,additionalColumn)#
#
finished = unique(dat[,1])#
output = output[finished,]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
write.table(output,"recipe_list(ForPostGres).txt",row.names=F,sep=",",col.names=F)
dim(finalOut)
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
finalOut = c()#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
	if(is.na(select)==F){#
#print(paste(select,recipeIndex))#
		additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
		finalOut = rbind(finalOut,output[which(output[,1] == recipeIndex),])#
	}else{#
#output = output[-which(output[,1] == recipeIndex),]#
	}#
}#
output = cbind(finalOut,additionalColumn)#
#
finished = unique(dat[,1])#
output = output[finished,]#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
write.table(output,"recipe_list(ForPostGres).txt",row.names=F,sep=",",col.names=F)
output[nrow(output),]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
finalOut = c()#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
	if(is.na(select)==F){#
#print(paste(select,recipeIndex))#
		additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
		finalOut = rbind(finalOut,output[which(output[,1] == recipeIndex),])#
	}else{#
#output = output[-which(output[,1] == recipeIndex),]#
	}#
}#
output = cbind(finalOut,additionalColumn)
output[nrow(output),]
finished = unique(dat[,1])
finished
output = output[finished,]
output
dim(output)
finished = unique(dat[,1])
dim(finished)
dat[,1]
unique(dat[,1])
finished = unique(dat[,1])
finished
output[finished,]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/URLs")#
#
dat = read.table(list.files())#
#
output = dat[,2:3]#
finalOut = c()#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Ingredient_Dat")#
#
dat = read.table(list.files())#
additionalColumn = c()#
for(recipeIndex in output[,1]){#
	select = which(dat[,1]==recipeIndex)[1]#
	if(is.na(select)==F){#
#print(paste(select,recipeIndex))#
		additionalColumn = rbind(additionalColumn,dat[select,c(2,4,5,6,7)])#
		finalOut = rbind(finalOut,output[which(output[,1] == recipeIndex),])#
	}else{#
#output = output[-which(output[,1] == recipeIndex),]#
	}#
}#
output = cbind(finalOut,additionalColumn)
dim(output)
output[nrow(output)]
output[nrow(output),]
dat[which(dat[,1]==1600),]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
#
source("Scripts/create_recipe_table(forPostgres).R")#
#
print(1)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Scripts/Ingredient_Commonality_Table(ForPostgres).R")#
#
print(2)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Scripts/create_full_ingredient_table(ForPostgres).R")#
#
print(3)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/Ingredient_Generalization_ConverterCrappyFoodList.R")#
#
print(4)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/Cleaned_Ingredient_Commonality_Table(ForPostgres).R")#
#
print(5)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/recipe_list_addCommonalityAvg.R")#
#
print(6)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/Bayesian_Pairs.R")#
#
print(7)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/User_Pairings_Base.R")#
print("done")
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/Ingredient_Generalization_ConverterCrappyFoodList.R")
conversion = read.csv("crappy_food_list.csv",stringsAsFactors=F)
dim(conversion)
conversion = gsub("\\(","",conversion)#
conversion = gsub("\\)","",conversion)
dim(conversion)
conconversion = read.csv("crappy_food_list.csv",stringsAsFactors=F)
conversion = read.csv("crappy_food_list.csv",stringsAsFactors=F)
conversion[,1]
setwd("/Users/raulfoo/Desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability.txt",stringsAsFactors=F)#
#
conversion = read.csv("crappy_food_list.csv",stringsAsFactors=F)#
#
newConv = c()#
#
conversion[,1] = gsub("\\(","",conversion[,1])#
conversion[,1] = gsub("\\)","",conversion[,1])
dim(conversion)
print(3)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/Ingredient_Generalization_ConverterCrappyFoodList.R")#
#
print(4)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/Cleaned_Ingredient_Commonality_Table(ForPostgres).R")#
#
print(5)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/recipe_list_addCommonalityAvg.R")#
#
print(6)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/Bayesian_Pairs.R")#
#
print(7)#
setwd("/Users/raulfoo/Desktop/Recipe_Generator/")#
source("Files_For_Postgres/scripts/User_Pairings_Base.R")
json = paste("{"," ing:",dat," }"},sep="")
json = paste("{"," ing:",dat," }",sep="")
json
setwd("/Users/raulfoo/desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability_Cleaned.txt",sep=",")[,1]
json = paste("{"," ing:",dat," }",sep="")
json
setwd("/Users/raulfoo/desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability_Cleaned.txt",sep=",")[,1]#
#
json = paste(dat, collapse=",")#
json = paste("[",json,"]",sep="")
json
setwd("/Users/raulfoo/desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability_Cleaned.txt",sep=",")[,1]#
#
json = paste(dat, collapse=",")#
json = paste("[",json,"]",sep="")#
setwd("/Users/raulfoo/okcookit/public/json")#
writeLines(json,"simple_search.json")
setwd("/Users/raulfoo/desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability_Cleaned.txt",sep=",")[,1]#
#
json = paste('"',dat,'"',collapse=",")#
json = paste("[",json,"]",sep="")#
setwd("/Users/raulfoo/okcookit/public/json")#
writeLines(json,"simple_search.json")
setwd("/Users/raulfoo/desktop/Recipe_Generator/Files_For_PostGres")#
#
dat = read.table("Base_Probability_Cleaned.txt",sep=",")[,1]#
#
json = paste('"',dat,'"',sep="",collapse=",")#
json = paste("[",json,"]",sep="")#
setwd("/Users/raulfoo/okcookit/public/json")#
writeLines(json,"simple_search.json")
